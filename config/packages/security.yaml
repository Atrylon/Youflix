security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
            App\Entity\User: bcrypt
    providers:
        in_memory: { memory: ~ }
        our_db_provider:
                    entity:
                        class: App\Entity\User
                        property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            provider: our_db_provider
            form_login:
                login_path: login
                check_path: login
                success_handler: authentification.success_handler
                failure_handler: authentification.failure_handler
                username_parameter: "login[email]"
                password_parameter: "login[password]"
            logout:
                path: /logout
                target: /

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
    role_hierarchy:
            ROLE_ADMIN: [ROLE_USER]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/listUser, roles: ROLE_ADMIN }
        - { path: ^/user_id, roles: ROLE_ADMIN }
        - { path: ^/user_remove, roles: ROLE_ADMIN }
        - { path: ^/listVideo, roles: ROLE_ADMIN }
        - { path: ^/listVideoByUser, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/myVideo, roles: ROLE_USER }
        - { path: ^/addVideo, roles: ROLE_USER }
        - { path: ^/editVideo, roles: ROLE_USER }
        - { path: ^/removeVideo, roles: ROLE_USER }
